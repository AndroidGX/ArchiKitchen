#!/bin/bash
 
# Copyright 2014 JustArchi@JustArchi.net
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# Initial variables
VERSION=1.0
TOOLS=(basename dirname clear gcc java perl sed wget od wc cpio zip unzip tar)
ACTIVE_PROJECT=""

clear
echo -n "Please wait"

# Navigate to our folder, even if user didn't execute it from the root dir
cd $(dirname $0)

# Before we begin, make sure that all our tools are available
for TOOL in "${TOOLS[@]}"; do
	echo -n "."
	if [ -z $(which $TOOL) ]; then
		echo "It looks like you don't have one of the required tools: $TOOL"
		echo "This check was made through 'which' command"
		echo "Please install missing tool and launch kitchen again"
		exit 1
	fi
done

# Make sure our tools are executable
chmod -R 755 tools

# Core
PRESS_ENTER() {
	read -p "Press [Enter] key to continue..."
}

ROOT_EXECUTE() {
	if [ $(whoami) == "root" ]; then
		$@
	else
		echo "Root access is required! I'm about to execute command $@"
		sudo $@
	fi
}

DO_SETPROJECT() {
	echo
	echo "You currently don't have any active projects"
	echo "I'll now list you all available projects, which you created in the past"
	echo
	COUNT=0
	for i in $(find . -maxdepth 1 -iname "PROJECT_*" -type d); do
		COUNT=$(expr $COUNT + 1)
		echo "["$COUNT"] - $(basename $i)"
	done
	if [ $COUNT -gt 0 ]; then
		echo "I found $COUNT available projects, and listed them above. Please tell me which one you want to use"
		echo "Write a number of the project, which you want to activate or..."
	else
		echo "Sorry, I didn't find any available project, it looks like you must create a new one"
	fi
	echo
	echo "Write n to create a new project"
	echo "Write x to abort"
	echo -n "CHOICE: "
	read CHOICE
	case "$CHOICE" in
		"n")
			DO_NEWPROJECT
			;;
		"x")
			exit 0
			;;
		*)
			if [ $CHOICE -gt $COUNT ] || [ $CHOICE -lt 1 ]; then
				echo "Error, invalid selection"
				return 1
			fi
			COUNT=$CHOICE
			for i in $(find . -maxdepth 1 -iname "PROJECT_*" -type d); do
				COUNT=$(expr $COUNT - 1)
				if [ $COUNT -eq 0 ]; then
					ACTIVE_PROJECT=$(basename $i)
					break
				fi
			done
			if [ -z $ACTIVE_PROJECT ]; then
				echo "Error, you didn't select anything"
				return 1
			else
				if [ -e $ACTIVE_PROJECT/boot.img ] && [ -e $ACTIVE_PROJECT/system ]; then
					echo "OK, current active project is now $ACTIVE_PROJECT"
				else
					ACTIVE_PROJECT=""
					echo "Sorry, could not find boot.img and system folder in your project"
					return 1
				fi
			fi
	esac
	return 0
}

DO_NEWPROJECT() {
	clear
	echo "ArchiKitchen currently supports system in system.img and system.img.ext4 format"
	echo "Please put proper base drop in base_drops folder"
	echo "It can be standalone system.img(.ext4) file, or an archive, which contains such file"
	echo "Are you ready?"
	PRESS_ENTER
	SEARCH=true
	while ($SEARCH); do
		echo "Looking for system.img..."
		SYSTEMDIR=""
		SYSTEMFILE=""
		for f in $(find base_drops -type f); do
			FILE=$(basename $f)
			case "$FILE" in
				"system.img")
					;&
				"system.img.ext4")
					SYSTEMDIR=$(dirname $f)
					SYSTEMFILE=$(basename $f)
					echo "Found $SYSTEMDIR/$SYSTEMFILE, which should be the proper file"
					SEARCH=false
					break
					;;
				*)
					continue
			esac
		done
		if [ -z "$SYSTEMFILE" ]; then
			echo "No system.img found"
			echo
			echo "r - refresh"
			echo "d - decompress one of the files, if it should contain system.img"
			echo "x - abort"
			echo -n "CHOICE: "
			read CHOICE
			case "$CHOICE" in
				"r")
					clear
					;;
				"d")
					COUNT=0
					for i in $(find base_drops/ -type f); do
						COUNT=$(expr $COUNT + 1)
						echo "["$COUNT"] - $(dirname $i)/$(basename $i)"
					done
					echo "Please tell me which file should contain system.img"
					echo -n "CHOICE: "
					read CHOICE
					if [ $CHOICE -gt $COUNT ] || [ $CHOICE -lt 1 ]; then
						echo "Error, invalid selection"
						exit 1
					fi
					COUNT=$CHOICE
					for i in $(find base_drops/ -type f); do
						COUNT=$(expr $COUNT - 1)
						if [ $COUNT -eq 0 ]; then
							FILE="$i"
							break
						fi
					done
					echo "Extracting everything from $FILE"

					# TODO: We should find more universal way for finding out type of the file
					tar xvf $FILE -C base_drops/ || unzip $FILE -d base_drops/

					if [ $? -ne 0 ]; then
						echo "Error, it looks like this file format isn't supported"
						return 1
					fi
					;;
				"x")
					return 1
					;;
				*)
					echo "No valid selection"
					return 1
			esac
		fi
	done

	ACTIVE_PROJECT="PROJECT_"
	ACTIVE_PROJECT+="$(date '+%m%d%y_%H%M%S')"
	echo "Creating $ACTIVE_PROJECT"
	mkdir -p $ACTIVE_PROJECT/system
	cp $SYSTEMDIR/boot.img $ACTIVE_PROJECT/

	# TODO: Support non-ext4 filesystems
	FS="ext4"

	cp $SYSTEMDIR/$SYSTEMFILE $ACTIVE_PROJECT/system.img.$FS
	for EXTRA in 'cache.img'; do
		if [ -e $SYSTEMDIR/$EXTRA ]; then
			echo "Found $EXTRA"
			case "$EXTRA" in
				"cache.img")
					echo "Do you want to include found cache.img file?"
					echo "This file usually contains CSC stuff, say yes if you're unsure"
					echo
					echo "y - Yes"
					echo "n - No"
					echo -n "CHOICE: "
					read CHOICE
					case "$CHOICE" in
						"n")
							continue
							;;
						"y")
							cp $SYSTEMDIR/$EXTRA $ACTIVE_PROJECT/$EXTRA.$FS
							;;
						*)
							echo "Unknown choice, guessing yes"
							cp $SYSTEMDIR/$EXTRA $ACTIVE_PROJECT/$EXTRA.$FS
					esac
					;;
				*)
					cp $SYSTEMDIR/$EXTRA $ACTIVE_PROJECT/$EXTRA.$FS
			esac
		fi
	done

	DO_MAKESURE_WEHAVE_SIMG2IMG
	DO_SIMG2IMG_ALL
	DO_MAKESURE_WEHAVE_METAINF
}

DO_SIMG2IMG_ALL() {
	for f in $(find $ACTIVE_PROJECT -maxdepth 1 -type f -iname "*.ext4"); do
		echo "Converting and mounting $(basename $f)"
		./temp/simg2img $f $f.simg2img
		rm -f $f
		mkdir -p /tmp/ArchiKitchenLOOP
		ROOT_EXECUTE "mount -o loop $f.simg2img /tmp/ArchiKitchenLOOP"
		echo "Extracting files from $(basename $f)"
		IMGNAME=$(basename "$f" | cut -d'.' -f1)
		case "$IMGNAME" in
			"cache")
				unzip -q /tmp/ArchiKitchenLOOP/recovery/sec_csc.zip -d $ACTIVE_PROJECT/
				# Delete old META-INF
				rm -rf $ACTIVE_PROJECT/META-INF
				;;
			*)
				cp -R /tmp/ArchiKitchenLOOP/* $ACTIVE_PROJECT/$IMGNAME/
		esac
		ROOT_EXECUTE "umount /tmp/ArchiKitchenLOOP"
		rm -f $f.simg2img
	done
}

DO_MAKESURE_WEHAVE_SIMG2IMG() {
	if [ ! -e temp/simg2img ]; then
		mkdir -p temp
		gcc -O2 tools/simg2img/sparse_crc32.c tools/simg2img/simg2img.c -o temp/simg2img
	fi
}

DO_MAKESURE_WEHAVE_METAINF() {
	mkdir -p $ACTIVE_PROJECT/META-INF/com/google/android
	cp files/product/generic/update-binary $ACTIVE_PROJECT/META-INF/com/google/android/update-binary
	for i in "updater-script-HEAD" "updater-script-SYMLINKS" "updater-script-PERMISSIONS" "updater-script-TAIL"; do
		cp "files/product/generic/$i" "$ACTIVE_PROJECT/META-INF/com/google/android/$i"
	done
	BUILD_UPDATER_SCRIPT
}

REBUILD_UPDATER-SCRIPT() {
	local MODE=""
	local STYLE=""
	local FILE=""
	for arg in $@; do
		case "$arg" in
			"ADD")
				MODE="ADD"
				shift 1
				;;
			"DEL")
				MODE="DEL"
				shift 1
				;;
			"HEAD")
				FILE="updater-script-HEAD"
				shift 1
				;;
			"SYMLINK")
				FILE="updater-script-SYMLINKS"
				shift 1
				;;
			"PERMISSIONS")
				FILE="updater-script-PERMISSIONS"
				shift 1
				;;
			"TAIL")
				FILE="updater-script-TAIL"
				shift 1
				;;
			"APPEND")
				STYLE="APPEND"
				shift 1
				;;
			"PREPEND")
				STYLE="PREPEND"
				shift 1
				;;
			*)
				continue
		esac
	done
	if [ $MODE == "DEL" ]; then
		#TODO: Handle this through $@? Couldn't find non-conflict way
		sed -i "/$1/d" $ACTIVE_PROJECT/META-INF/com/google/android/$FILE
		shift 1
	elif [ $MODE == "ADD" ]; then
		if [ $STYLE == "APPEND" ]; then
			echo "" >> $ACTIVE_PROJECT/META-INF/com/google/android/$FILE
			echo "$@" >> $ACTIVE_PROJECT/META-INF/com/google/android/$FILE
		elif [ $STYLE == "PREPEND" ]; then
			mv $ACTIVE_PROJECT/META-INF/com/google/android/$FILE $ACTIVE_PROJECT/META-INF/com/google/android/$FILE.tmp
			echo "$@" > $ACTIVE_PROJECT/META-INF/com/google/android/$FILE
			cat $ACTIVE_PROJECT/META-INF/com/google/android/$FILE.tmp >> $ACTIVE_PROJECT/META-INF/com/google/android/$FILE
			rm -f $ACTIVE_PROJECT/META-INF/com/google/android/$FILE.tmp
		fi
	fi
	#BUILD_UPDATER_SCRIPT
}

BUILD_UPDATER_SCRIPT() {
	echo -n "" > $ACTIVE_PROJECT/META-INF/com/google/android/updater-script
	for i in "updater-script-HEAD" "updater-script-SYMLINKS" "updater-script-PERMISSIONS" "updater-script-TAIL"; do
		cat "$ACTIVE_PROJECT/META-INF/com/google/android/$i" >> "$ACTIVE_PROJECT/META-INF/com/google/android/updater-script"
	done
	echo "" >> "$ACTIVE_PROJECT/META-INF/com/google/android/updater-script"
}

CLEAN_EVERYTHING() {
	for i in "updater-script-HEAD" "updater-script-SYMLINKS" "updater-script-PERMISSIONS" "updater-script-TAIL"; do
		rm -f $ACTIVE_PROJECT/META-INF/com/google/android/$i
	done
}

BUSYBOX() {
	if [ ! -e $ACTIVE_PROJECT/system/xbin/busybox ]; then
		mkdir -p $ACTIVE_PROJECT/system/xbin
		cp files/busybox/busybox $ACTIVE_PROJECT/system/xbin/busybox
		REBUILD_UPDATER-SCRIPT "ADD" "SYMLINK" "APPEND" 'symlink("/system/xbin/busybox", "/system/bin/busybox");'
		REBUILD_UPDATER-SCRIPT "ADD" "TAIL" "PREPEND" 'run_program("/system/xbin/busybox", "--install", "-s", "/system/xbin");'
	else
		rm -f $ACTIVE_PROJECT/system/xbin/busybox
		REBUILD_UPDATER-SCRIPT "DEL" "SYMLINK" "busybox" 'symlink("/system/xbin/busybox", "/system/bin/busybox");'
		REBUILD_UPDATER-SCRIPT "DEL" "TAIL" "busybox" 'run_program("/system/xbin/busybox", "--install", "-s", "/system/xbin");'
	fi
	BUILD_UPDATER_SCRIPT
}

# Main
while :; do
	clear

	echo "Android Kitchen version $VERSION - by JustArchi (@xda-developers.com)"
	echo "Originally created by dsixda (@xda-developers.com)"
	echo
	if [ -z "$ACTIVE_PROJECT" ]; then
		DO_SETPROJECT
		PRESS_ENTER
		clear
	fi
	if [ ! -e $ACTIVE_PROJECT/system/xbin/busybox ]; then
		echo "Busybox [NOT-INCLUDED]"
	else
		echo "Busybox [BUILT-IN]"
	fi
	echo "b - Include/Remove Busybox"
	echo "x - exit"
	read CHOICE
	case "$CHOICE" in
		"x")
			exit 0
			;;
		"b")
			BUSYBOX
			;;
		*)
			continue
	esac
done